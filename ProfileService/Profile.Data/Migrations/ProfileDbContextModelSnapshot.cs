// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profile.Data.Data;

#nullable disable

namespace Profile.Data.Migrations
{
    [DbContext(typeof(ProfileDbContext))]
    partial class ProfileDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Profile.Data.Data.Entities.HeroEntity", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profile_id");

                    b.Property<int>("HeroId")
                        .HasColumnType("int")
                        .HasColumnName("hero_id");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.HasKey("ProfileId", "HeroId");

                    b.ToTable("profile_heroes", (string)null);
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("ChallengeGamesCount")
                        .HasColumnType("int")
                        .HasColumnName("challenge_games_count");

                    b.Property<int>("ChallengeWinStreakCount")
                        .HasColumnType("int")
                        .HasColumnName("challenge_win_streak_count");

                    b.Property<int>("ChallengeWinsCount")
                        .HasColumnType("int")
                        .HasColumnName("challenge_wins_count");

                    b.Property<Guid?>("ClanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clan_id");

                    b.Property<int>("Coins")
                        .HasColumnType("int")
                        .HasColumnName("coins");

                    b.Property<int>("Gems")
                        .HasColumnType("int")
                        .HasColumnName("gems");

                    b.Property<int>("MainEpicWinsCount")
                        .HasColumnType("int")
                        .HasColumnName("main_epic_wins_count");

                    b.Property<int>("MainGamesCount")
                        .HasColumnType("int")
                        .HasColumnName("main_games_count");

                    b.Property<int>("MainKilledEnemies")
                        .HasColumnType("int")
                        .HasColumnName("main_killed_enemies_count");

                    b.Property<int>("MainMaxRating")
                        .HasColumnType("int")
                        .HasColumnName("main_max_rating");

                    b.Property<int>("MainWinsCount")
                        .HasColumnType("int")
                        .HasColumnName("main_wins_count");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nickname");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.ProfileHandHeroesEntity", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("profile_id");

                    b.Property<int>("HandType")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int>("HeroId")
                        .HasColumnType("int")
                        .HasColumnName("hero_id");

                    b.HasKey("ProfileId", "HandType", "HeroId");

                    b.HasIndex("ProfileId", "HeroId");

                    b.ToTable("profile_hand_heroes", (string)null);
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.HeroEntity", b =>
                {
                    b.HasOne("Profile.Data.Data.Entities.ProfileEntity", "Profile")
                        .WithMany("Heroes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.ProfileHandHeroesEntity", b =>
                {
                    b.HasOne("Profile.Data.Data.Entities.ProfileEntity", "Profile")
                        .WithMany("ActiveHeroes")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile.Data.Data.Entities.HeroEntity", "ActiveHeroes")
                        .WithMany("HandHeroes")
                        .HasForeignKey("ProfileId", "HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveHeroes");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.HeroEntity", b =>
                {
                    b.Navigation("HandHeroes");
                });

            modelBuilder.Entity("Profile.Data.Data.Entities.ProfileEntity", b =>
                {
                    b.Navigation("ActiveHeroes");

                    b.Navigation("Heroes");
                });
#pragma warning restore 612, 618
        }
    }
}
